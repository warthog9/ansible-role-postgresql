---
# tasks file for repleo.postgresql

- name: Install the selinux python module
  yum: name=libselinux-python state=present
  when: ansible_os_family == "RedHat"

- name: Copy the epel packages 
  copy: src=epel.repo dest=/etc/yum.repos.d/epel_ansible.repo
  when: ansible_os_family == "RedHat"

- name: Install the postgress packages 
  yum: name="{{ item }}" state=present
  with_items: "{{redhat_pkg}}"
  when: ansible_os_family == "RedHat"

- name: Install the postgres packages 
  apt: name="{{ item }}" state=present update_cache=yes
  with_items: "{{ubuntu_pkg}}"
  when: ansible_os_family == "Debian"

- name: Install python pip packages for database configuration
  pip:
    name={{item.name}}
    executable=pip
  with_items:
  - name: 'psycopg2'

- name: Instal pip3 if it's not installed (Debian)
  apt:
    name: python3-pip
    state: present
    update_cache: yes
  when: ansible_python_interpreter == "/usr/bin/python3"
  
- name: Install python pip packages for database configuration
  pip:
    name={{item.name}}
    executable=pip3
  with_items:
  - name: 'psycopg2'
  when: ansible_python_interpreter == "/usr/bin/python3"
  
- name: start the postgresql service
  service: name=postgresql state=started enabled=yes

- name: Create database if not exist
  become: yes
  become_method: sudo
  become_user: postgres
  postgresql_db: name="{{item.name}}"
  with_items: 
   - "{{ databases }}"
  when:
   - item.name is defined
   - item.name != None
   
- name: Create database user
  become: yes
  become_method: sudo
  become_user: postgres
  postgresql_user: db="{{item.0.name}}" name="{{item.1.user}}" password="{{item.1.password}}" 
  with_subelements: 
   - "{{databases}}"
   - users
  when:
   - item.0.name is defined
   - item.0.name != None
   - item.1.user is defined
   - item.1.user != None   

- name: Set database user privileges
  become: yes
  become_method: sudo
  become_user: postgres
  postgresql_privs: >
    db="{{item.0.name}}"
    privs="{{item.1.privileges}}"
    type="{{item.1.type}}"
    role="{{item.1.user}}"
  with_subelements: 
   - "{{databases}}"
   - users
  when:
   - item.0.name is defined
   - item.0.name != None
   - item.1.user is defined
   - item.1.user != None   

